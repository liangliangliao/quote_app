name: Android CI (Flutter)

on:
  workflow_dispatch:

env:
  PROJECT_DIR: project

jobs:
  build-android:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Flutter 3.22.0 (stable)
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.22.0'

      - name: Locate and unzip latest source package (prefer last committed)
        shell: bash
        run: |
          set -euxo pipefail
          LATEST_ZIP=""
          if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
            CANDIDATES=$(git log -n 400 --name-only --pretty=format: | awk '/^quote_app_src_fixed_full_.*\.zip$/ {print}' | awk '!seen[$0]++')
            for f in $CANDIDATES; do
              if [ -f "$f" ]; then LATEST_ZIP="$f"; break; fi
            done
          fi
          if [ -z "${LATEST_ZIP:-}" ]; then
            LATEST_ZIP=$(ls -1 quote_app_src_fixed_full_*.zip 2>/dev/null | sed -E 's/.*_R([0-9]+)\.zip/\1 &/' | sort -nr | awk '{print $2}' | head -n1 || true)
          fi
          if [ -z "${LATEST_ZIP:-}" ]; then
            LATEST_ZIP=$(ls -1t quote_app_src_fixed_full_*.zip 2>/dev/null | head -n1 || true)
          fi
          echo "PROJECT_DIR=${{ env.PROJECT_DIR }}" >> $GITHUB_ENV
          if [ -n "${LATEST_ZIP:-}" ]; then
            echo "[info] Picked ZIP: ${LATEST_ZIP}"
            rm -rf "${{ env.PROJECT_DIR }}"
            mkdir -p "${{ env.PROJECT_DIR }}"
            unzip -q "${LATEST_ZIP}" -d "${{ env.PROJECT_DIR }}"
          else
            echo "[info] No source ZIP found; assuming repo already contains the Flutter project."
            ls -la
          fi

      - name: Scan for v1 markers (decide if recreate is needed)
        id: scan
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -euxo pipefail
          echo "need=false" >> $GITHUB_OUTPUT
          if grep -R "io.flutter.app" -n . || grep -R "FlutterApplication" -n . || grep -R "GeneratedPluginRegistrant" -n .; then
            echo "Found v1 markers -> need recreate"
            echo "need=true" >> $GITHUB_OUTPUT
          fi

      - name: Verify v2 embedding really landed (pre-build)
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -euxo pipefail
          echo "== PWD ==" && pwd && ls -la
          echo "== AndroidManifest.xml (application block) =="
          awk '/<application/{flag=1} flag; /<\/application>/{flag=0}' android/app/src/main/AndroidManifest.xml || true
          echo "== Search for any v1 identifiers in WHOLE repo (should be empty) =="
          grep -R "io.flutter.app" -n . || true
          grep -R "FlutterApplication" -n . || true
          grep -R "GeneratedPluginRegistrant" -n . || true

      - name: Recreate android folder with v2 template (only if needed)
        if: steps.scan.outputs.need == 'true'
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -euxo pipefail
          echo "[info] Recreating android/ only because v1 markers were found..."
          rm -rf android.bak || true
          mv android android.bak || true
          flutter create . --platforms=android --org com.example --project-name quote_app --overwrite
          if [ -f android.bak/app/proguard-rules.pro ]; then
            cp -f android.bak/app/proguard-rules.pro android/app/proguard-rules.pro
            sed -i '/GeneratedPluginRegistrant/d' android/app/proguard-rules.pro || true
          fi
          echo "[info] android/ recreated."

      - name: Flutter clean & pub get
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -euxo pipefail
          flutter --version
          flutter pub get

      - name: Build release APK (Flutter, verbose) with Gradle fallback
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -euxo pipefail
          set +e
          ( set -o pipefail; flutter build apk --release -v 2>&1 | tee flutter_build_verbose.log )
          FB_RC=${PIPESTATUS[0]}
          if [ "$FB_RC" -ne 0 ]; then
            echo "[warn] flutter frontdoor failed; trying Gradle assembleRelease..."
            pushd android
            ( set -o pipefail; ./gradlew --no-daemon assembleRelease -x lint -x test --stacktrace 2>&1 | tee ../gradle_assemble_release.log )
            GR_RC=${PIPESTATUS[0]}
            popd
            exit $GR_RC
          fi

      - name: List produced APKs
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -euxo pipefail
          echo "== Search for any produced APKs =="
          find . -maxdepth 8 -type f -name '*.apk' -print || true

      - name: Upload APK artifacts and logs
        uses: actions/upload-artifact@v4
        with:
          name: android-apks-and-logs
          path: |
            ${{ env.PROJECT_DIR }}/**/*.apk
            ${{ env.PROJECT_DIR }}/flutter_build_verbose.log
            ${{ env.PROJECT_DIR }}/gradle_assemble_release.log
          if-no-files-found: warn
