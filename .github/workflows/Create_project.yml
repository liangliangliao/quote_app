name: Android (migrate to official template & build)

on:
  workflow_dispatch:
  push:
    branches: [main, master]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PUB_CACHE: ${{ github.workspace }}/.pub-cache
      GRADLE_USER_HOME: ${{ github.workspace }}/.gradle

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) 若根目录无 pubspec.yaml，则从你上传的 zip 中“按原结构”解压（不覆盖 .github）
      - name: Pick & unzip project ZIP (if repo root has no pubspec)
        id: unzip
        shell: bash
        run: |
          set -euo pipefail
          if [ -f pubspec.yaml ]; then
            echo "unzipped=false" >> "$GITHUB_OUTPUT"; exit 0
          fi
          SEL="$(ls -1t *.zip 2>/dev/null | head -n1 || true)"
          if [ -z "${SEL}" ]; then
            SEL="$(find . -maxdepth 6 -type f -name '*.zip' -printf '%T@ %p\n' 2>/dev/null | sort -nr | head -n1 | cut -d' ' -f2- || true)"
          fi
          [ -n "${SEL}" ] || { echo "❌ No project zip and no pubspec.yaml"; exit 66; }
          echo "ZIP=${SEL}"
          # 原始结构解压，不改文件名；排除工作流目录，避免自我覆盖
          unzip -q -o "${SEL}" -x ".github/*"
          echo "unzipped=true" >> "$GITHUB_OUTPUT"

      # 2) 定位项目根目录（含 pubspec.yaml）
      - name: Detect Flutter project dir
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          DIR="$(find . -maxdepth 6 -type f -name pubspec.yaml | head -n1 | xargs -I{} dirname {} || true)"
          [ -n "$DIR" ] || { echo "❌ pubspec.yaml not found"; exit 66; }
          DIR="${DIR#./}"
          echo "project_dir=${DIR}" >> "$GITHUB_OUTPUT"
          echo "Project dir: $DIR"

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Flutter 3.35.3 (stable)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.35.3"
          channel: stable
          cache: true

      # 3) 绑定 SDK 路径（路径无关，防止找不到 SDK）
      - name: Bind SDK paths (local.properties)
        working-directory: ${{ steps.detect.outputs.project_dir }}/android
        shell: bash
        run: |
          set -euo pipefail
          : "${ANDROID_SDK_ROOT:=${ANDROID_HOME:-/usr/local/lib/android/sdk}}"
          : "${FLUTTER_HOME:=$(dirname "$(dirname "$(readlink -f "$(which flutter)")")")}"
          mkdir -p android || true
          echo "sdk.dir=${ANDROID_SDK_ROOT}" >  local.properties
          echo "flutter.sdk=${FLUTTER_HOME}" >> local.properties
          cat local.properties

      # 4) 自动探测包名(APP_ID)与工程名(APP_NAME)
      - name: Auto-detect package name & project name
        id: autodetect
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          APP_ID=""
          # a) 从 app/build.gradle 找 applicationId 或 namespace
          if [ -f android/app/build.gradle ]; then
            APP_ID="$(grep -E '^\s*applicationId\s*"' android/app/build.gradle | head -n1 | sed -E 's/.*applicationId\s*"([^"]+)".*/\1/')"
            if [ -z "$APP_ID" ]; then
              APP_ID="$(grep -E '^\s*namespace\s*"' android/app/build.gradle | head -n1 | sed -E 's/.*namespace\s*"([^"]+)".*/\1/')"
            fi
          fi
          # b) 若仍为空，从 AndroidManifest.xml 的 package 取
          if [ -z "$APP_ID" ] && [ -f android/app/src/main/AndroidManifest.xml ]; then
            APP_ID="$(grep -Eo 'package="[^"]+"' android/app/src/main/AndroidManifest.xml | head -n1 | sed -E 's/package="([^"]+)"/\1/')"
          fi
          # c) 若仍为空，从 kotlin/java 源路径猜测
          if [ -z "$APP_ID" ]; then
            CAND="$(find android/app/src/main -type f \( -name MainActivity.kt -o -name MainActivity.java \) | head -n1 || true)"
            if [ -n "$CAND" ]; then
              APP_ID="$(sed -nE 's/^package\s+([a-zA-Z0-9_.]+)\s*;?/\1/p' "$CAND" | head -n1 || true)"
            fi
          fi
          # d) 兜底
          if [ -z "$APP_ID" ]; then
            APP_ID="com.example.${GITHUB_REPOSITORY##*/}"
          fi
          # 自动探测工程名（pubspec name，snake_case）
          APP_NAME="$(grep -E '^name:' pubspec.yaml | head -n1 | awk '{print $2}' | tr '[:upper:]' '[:lower:]' | tr -c 'a-z0-9_' '_' )"
          [ -n "$APP_NAME" ] || APP_NAME="app"
          echo "APP_ID=$APP_ID"
          echo "APP_NAME=$APP_NAME"
          echo "app_id=${APP_ID}"   >> "$GITHUB_OUTPUT"
          echo "app_name=${APP_NAME}" >> "$GITHUB_OUTPUT"

      # 5) 备份 Dart/pubspec
      - name: Backup Dart & pubspec
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          rm -rf _bk || true
          mkdir -p _bk
          for p in lib assets test analysis_options.yaml pubspec.yaml; do
            if [ -e "$p" ]; then
              rsync -a "$p" "_bk/$p"
            fi
          done

      # 6) 用官方模板重建 android/（不会动你的 Dart）
      - name: Regenerate official Android template
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          flutter create -t app --platforms=android \
            --org "${{ steps.autodetect.outputs.app_id }}" \
            --project-name "${{ steps.autodetect.outputs.app_name }}" \
            --overwrite .
          echo "✅ Official android/ template generated."

      # 7) 还原 Dart 和 pubspec
      - name: Restore Dart & pubspec
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -d _bk ]; then
            rsync -a _bk/ .
          fi

      # 8) 回写 applicationId/namespace 与 SDK/Java/Kotlin 版本
      - name: Update applicationId / namespace / SDK versions
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          APP_GRADLE=android/app/build.gradle
          APP_ID="${{ steps.autodetect.outputs.app_id }}"
          sed -i -E "s/^\s*namespace\s+\"[^\"]+\"/namespace \"${APP_ID}\"/" "$APP_GRADLE" || true
          sed -i -E "s/^\s*applicationId\s+\"[^\"]+\"/applicationId \"${APP_ID}\"/" "$APP_GRADLE" || true
          sed -i -E "s/compileSdk\s*=\s*[0-9]+/compileSdk=35/" "$APP_GRADLE" || true
          sed -i -E "s/targetSdk\s*=\s*[0-9]+/targetSdk=35/" "$APP_GRADLE" || true
          sed -i -E "s/minSdk\s*=\s*[0-9]+/minSdk=21/" "$APP_GRADLE" || true
          sed -i -E "s/jvmTarget\s*=\s*\"?[0-9]+\"?/jvmTarget = \"17\"/" "$APP_GRADLE" || true
          if ! grep -q "JavaVersion.VERSION_17" "$APP_GRADLE"; then
            sed -i -E 's/compileOptions\s*\{[^}]*\}/compileOptions { sourceCompatibility JavaVersion.VERSION_17; targetCompatibility JavaVersion.VERSION_17 }/' "$APP_GRADLE" || true
          fi

      # 9) 干净拉依赖（缓存定位到工作区，路径可控）
      - name: Clean caches (fresh resolve)
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          flutter clean || true
          rm -f pubspec.lock || true
          yes | flutter pub cache clean >/dev/null 2>&1 || true
          rm -rf "$PUB_CACHE" "$GRADLE_USER_HOME"
          mkdir -p "$PUB_CACHE" "$GRADLE_USER_HOME"

      - name: Flutter pub get
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: flutter pub get

      # 10) 构建 + 打包迁移后源码
      - name: Build APK (release)
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          flutter build apk --release -v | tee build_apk.log

      - name: Package migrated source as zip
        if: always()
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          OUT="$PWD/migrated_source.zip"
          zip -qr "$OUT" . \
            -x "*.git*" ".gradle/*" "build/*" ".dart_tool/*" \
               ".idea/*" ".vscode/*" ".pub-cache/*" "*/.DS_Store"
          ls -lah "$OUT"

      - name: Upload artifacts (APK + logs + migrated source)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app-apk-and-migrated-source
          path: |
            ${{ steps.detect.outputs.project_dir }}/build/app/outputs/flutter-apk/app-release.apk
            ${{ steps.detect.outputs.project_dir }}/build_apk.log
            ${{ steps.detect.outputs.project_dir }}/migrated_source.zip
          if-no-files-found: warn
