name: Android (V2 + All Latest)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  android:
    runs-on: ubuntu-latest
    env:
      GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx6g -XX:MaxMetaspaceSize=1g"
      JAVA_TOOL_OPTIONS: "-Xms512m -Xmx2048m"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sanity - list repo root
        run: ls -lah

      # 如果仓库根没有 pubspec.yaml，自动挑最新 zip 解压
      - name: (Optional) Pick & unzip latest zip
        id: pickzip
        shell: bash
        run: |
          set -euo pipefail
          if [ -f pubspec.yaml ]; then
            echo "zipmode=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          SEL="$(ls -1t *.zip 2>/dev/null | head -n1 || true)"
          if [ -z "${SEL}" ]; then
            SEL="$(find . -maxdepth 4 -type f -name '*.zip' -printf '%T@ %p\n' 2>/dev/null | sort -nr | head -n1 | cut -d' ' -f2- || true)"
          fi
          if [ -n "${SEL}" ]; then
            echo "zipmode=true" >> "$GITHUB_OUTPUT"
            echo "zip=${SEL}" >> "$GITHUB_OUTPUT"
            echo "Unzipping: ${SEL}"
            unzip -q "${SEL}" -d .
          else
            echo "zipmode=false" >> "$GITHUB_OUTPUT"
          fi
          echo "After unzip:"; ls -lah

      - name: Detect Flutter project dir
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          DIR="$(find . -maxdepth 6 -type f -name pubspec.yaml | head -n1 | xargs -I{} dirname {} || true)"
          if [ -z "${DIR}" ]; then
            echo "Not a Flutter repo: pubspec.yaml not found."
            exit 66
          fi
          echo "project_dir=${DIR}" >> "$GITHUB_OUTPUT"
          echo "Found Flutter project at: ${DIR}"

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Flutter (latest stable)
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      # —— 保证干净解析：清理构建与 pub 缓存 —— #
      - name: Nuke caches (flutter build + pub cache)
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          flutter --version
          flutter clean || true
          rm -rf "$HOME/.pub-cache" || true
          flutter pub cache clean || true
          rm -f pubspec.lock || true

      # —— 改 pubspec：去掉所有版本号（= any），并设置 Dart SDK >=3.5 —— #
      - name: Rewrite pubspec to "any" & modern environment
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          echo "== BEFORE pubspec.yaml =="
          sed -n '1,200p' pubspec.yaml || true

          python3 - << 'PY'
          import re, sys, io
          p = "pubspec.yaml"
          s = open(p,'r',encoding='utf-8').read().splitlines()
          out=[]
          in_deps=False
          in_dev=False
          saw_env=False
           wrote_sdk=False
           for line in s:
    if line.strip().startswith('environment:'):
        saw_env=True
     out.append(line)
# 若没有 environment，追加
if not saw_env:
    out.append('environment:')
# 规范 environment.sdk
for i in range(len(out)):
    if out[i].strip().startswith('environment:'):
        # 查找下一行是否有 sdk:
        j=i+1
        found=False
        while j<len(out) and (out[j].startswith(' ') or out[j].strip()== ''):
            if out[j].strip().startswith('sdk:'):
                out[j] = '  sdk: \'>=3.5.0 <4.0.0\''
                found=True
                break
            j+=1
        if not found:
            out.insert(i+1, '  sdk: \'>=3.5.0 <4.0.0\'')
        break

# 去掉 dependencies / dev_dependencies 内的版本号（改为 any）
res=[]
in_deps=False
in_dev=False
for line in out:
    l = line.rstrip('\n')
    if re.match(r'^\s*dependencies:\s*$', l):
        in_deps=True; in_dev=False; res.append(l); continue
    if re.match(r'^\s*dev_dependencies:\s*$', l):
        in_deps=False; in_dev=True; res.append(l); continue
    if re.match(r'^\s*\w', l):
        in_deps=False; in_dev=False
    if (in_deps or in_dev) and re.search(r':\s*[\^~]?\d', l):
        l = re.sub(r':\s*.+$', ': any', l)
    res.append(l)

open(p,'w',encoding='utf-8').write('\n'.join(res))
PY

          echo "== AFTER pubspec.yaml =="
          sed -n '1,200p' pubspec.yaml || true

      - name: flutter pub upgrade (major)
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          flutter pub upgrade --major-versions
          flutter pub get
          flutter pub deps --style=compact || true

      # —— Android 侧：升级到新工具链 + V2 修补 —— #
      - name: Patch Android to latest toolchain (AGP/Kotlin/SDK/Wrapper + V2 embedding)
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -d android ]; then
            echo "No android/ folder, skip Android patch."
            exit 0
          fi

          APP="android/app/build.gradle"
          if [ -f "$APP" ]; then
            # 插件 DSL 确保存在
            if ! grep -q 'plugins {' "$APP"; then
              printf '%s\n%s\n\n' 'plugins {' '  id "com.android.application"' > android/app/__tmp_plugins__
              printf '%s\n' '  id "org.jetbrains.kotlin.android"' >> android/app/__tmp_plugins__
              printf '%s\n%s\n' '  id "dev.flutter.flutter-gradle-plugin"' '}' >> android/app/__tmp_plugins__
              cat android/app/__tmp_plugins__ "$APP" > android/app/__tmp_build__
              mv android/app/__tmp_build__ "$APP"
              rm -f android/app/__tmp_plugins__
            else
              # 追加缺失的插件 id
              sed -i '0,/plugins\s*{/{/plugins\s*{/!b;:a;n;/}/b;H;};${x;/com\.android\.application/!s/^{/&\n  id "com.android.application"/;p;d}' "$APP" || true
              sed -i '0,/plugins\s*{/{/plugins\s*{/!b;:a;n;/}/b;H;};${x;/org\.jetbrains\.kotlin\.android/!s/^{/&\n  id "org.jetbrains.kotlin.android"/;p;d}' "$APP" || true
              sed -i '0,/plugins\s*{/{/plugins\s*{/!b;:a;n;/}/b;H;};${x;/dev\.flutter\.flutter-gradle-plugin/!s/^{/&\n  id "dev.flutter.flutter-gradle-plugin"/;p;d}' "$APP" || true
            fi
            # SDK 等级（兼容新旧写法）
            sed -i -E 's/compileSdk\s*=?\s*[0-9]+/compileSdk 35/g' "$APP" || true
            sed -i -E 's/compileSdkVersion\s+[0-9]+/compileSdkVersion 35/g' "$APP" || true
            sed -i -E 's/minSdk\s*=?\s*[0-9]+/minSdk 23/g' "$APP" || true
            sed -i -E 's/minSdkVersion\s+[0-9]+/minSdkVersion 23/g' "$APP" || true
            sed -i -E 's/targetSdk\s*=?\s*[0-9]+/targetSdk 35/g' "$APP" || true
            sed -i -E 's/targetSdkVersion\s+[0-9]+/targetSdkVersion 35/g' "$APP" || true
          fi

          SETTINGS="android/settings.gradle"
          if [ -f "$SETTINGS" ]; then
            if ! grep -q 'dev.flutter.flutter-plugin-loader' "$SETTINGS"; then
              {
                echo ''
                echo 'plugins {'
                echo '  id("dev.flutter.flutter-plugin-loader") version "1.0.0"'
                echo '  id("com.android.application") version "8.3.1" apply false'
                echo '  id("org.jetbrains.kotlin.android") version "1.9.24" apply false'
                echo '}'
              } >> "$SETTINGS"
            fi
          fi

          if [ -f android/gradle/wrapper/gradle-wrapper.properties ]; then
            sed -i -E 's#distributionUrl=.*#distributionUrl=https\\://services.gradle.org/distributions/gradle-8.7-bin.zip#g' android/gradle/wrapper/gradle-wrapper.properties
          fi

          # Manifest：移除 v1 Application、补 V2 标记 + 常用权限
          find android/app/src -type f -name AndroidManifest.xml | while read -r M; do
            sed -i 's/android:name="io\.flutter\.app\.FlutterApplication"//g' "$M" || true
            if ! grep -q 'flutterEmbedding' "$M"; then
              awk '{print} /<application[^>]*>/ && !i {print "        <meta-data android:name=\"flutterEmbedding\" android:value=\"2\"/>"; i=1}' "$M" > "$M.__tmp__" && mv "$M.__tmp__" "$M"
            fi
            if echo "$M" | grep -q '/src/main/'; then
              if ! grep -q 'POST_NOTIFICATIONS' "$M"; then
                awk '{print} /<manifest[^>]*>/ && !j {print "    <uses-permission android:name=\"android.permission.POST_NOTIFICATIONS\"/>"; j=1}' "$M" > "$M.__tmp__" && mv "$M.__tmp__" "$M"
              fi
              if ! grep -q 'SCHEDULE_EXACT_ALARM' "$M"; then
                awk '{print} /<manifest[^>]*>/ && !k {print "    <uses-permission android:name=\"android.permission.SCHEDULE_EXACT_ALARM\"/>"; k=1}' "$M" > "$M.__tmp__" && mv "$M.__tmp__" "$M"
              fi
            fi
          done

          # MainActivity 保证 v2
          MA_KT="$(find android/app/src -type f -name MainActivity.kt | head -n1 || true)"
          MA_JAVA="$(find android/app/src -type f -name MainActivity.java | head -n1 || true)"
          if [ -n "${MA_KT}" ]; then
            sed -i 's#io\.flutter\.app\.FlutterActivity#io.flutter.embedding.android.FlutterActivity#g' "${MA_KT}" || true
            # 若类头不是 v2 写法，粗放替换（安全起见仅在匹配到 class MainActivity 时替换）
            if grep -q '^class MainActivity' "${MA_KT}"; then
              sed -i -E 's/^class\s+MainActivity.*$/class MainActivity: FlutterActivity()/' "${MA_KT}" || true
            fi
          elif [ -n "${MA_JAVA}" ]; then
            sed -i 's#io\.flutter\.app\.FlutterActivity#io.flutter.embedding.android.FlutterActivity#g' "${MA_JAVA}" || true
          fi

      # —— 构建并捕获完整日志 —— #
      - name: Build APK (capture logs)
        id: buildapk
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          ( set -o pipefail; flutter build apk -v 2>&1 | tee build_apk.log )

      # 如果 Flutter 早期失败，尝试直接用 Gradle 看编译期文件/行号
      - name: Gradle fallback compile (assembleRelease -> capture)
        if: failure()
        working-directory: ${{ steps.detect.outputs.project_dir }}/android
        shell: bash
        run: |
          set -o pipefail
          if [[ -x "./gradlew" ]]; then
            ./gradlew --version
            ( ./gradlew :app:assembleRelease --stacktrace --no-daemon 2>&1 | tee ../gradle_build.log ) || true
          fi

      # —— 从日志里标注“文件:行号:错误” —— #
      - name: Annotate compiler errors (from flutter & gradle logs)
        if: always()
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          echo "=== Snippets from Flutter log ==="
          if [ -f build_apk.log ]; then
            grep -nE "(^e: |^/home/runner/|\\.kt:|\\.java:|\\.gradle:|^FAILURE:)" build_apk.log || true
          fi
          echo "=== Snippets from Gradle log ==="
          if [ -f gradle_build.log ]; then
            grep -nE "(: error:|\\.kt:[0-9]+:|\\.java:[0-9]+:|^FAILURE:)" gradle_build.log || true
          fi

      - name: Upload artifacts (APK & logs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app-release-and-logs
          path: |
            ${{ steps.detect.outputs.project_dir }}/build/app/outputs/flutter-apk/app-release.apk
            ${{ steps.detect.outputs.project_dir }}/build_apk.log
            ${{ steps.detect.outputs.project_dir }}/gradle_build.log
