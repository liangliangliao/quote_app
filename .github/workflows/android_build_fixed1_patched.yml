name: Build Android APK

on:
  workflow_dispatch:
  push:
    paths:
      - "quote_app3333.zip"
      - "quote_app_v2_alllatest_20250915_OFFICIAL_PLUS_LIB_APPLY_FI555X.zip"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx4g"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sanity check - list repo root
        run: ls -lah

      - name: Pick project zip (auto-detect)
        id: pick
        shell: bash
        run: |
          set -e
          if [[ -f "quote_app_v2_alllatest_20250915_OFFICIAL_PLUS_LIB_APPLY_FIX555.zip" ]]; then
            zip="quote_app_v2_alllatest_20250915_OFFICIAL_PLUS_LIB_APPLY_FI555X.zip"
          elif [[ -f "quote_app333.zip" ]]; then
            zip="quote_app333.zip"
          else
            # fallback to any top-level .zip
            count=$(ls -1 *.zip 2>/dev/null | wc -l || true)
            if [[ "$count" -ge 1 ]]; then
              zip="$(ls -1 *.zip | head -n 1)"
            else
              echo "❌ 未找到 zip：请把工程 zip 放在仓库根目录，例如 quote_app.zip"; exit 1
            fi
          fi
          echo "zip=$zip" >> "$GITHUB_OUTPUT"
          echo "Using ZIP: $zip"
          echo "—— ZIP 内容预览 ——"
          unzip -l "$zip" | head -n 50

      - name: Force replace with latest zip
        shell: bash
        run: |
         set -euo pipefail
         SEL="$(ls -1t *.zip 2>/dev/null | head -n1 || true)"
         [ -n "$SEL" ] || { echo "No zip found"; exit 66; }
         echo "Using ZIP: $SEL"
         unzip -q -o "$SEL" -x ".github/*"

      - name: Detect project type and root
        id: detect
        shell: bash
        run: |

set -e
# Prefer a Flutter *app* root: must have both pubspec.yaml and lib/main.dart
FLUTTER_DIR=""
while IFS= read -r d; do
  if [[ -f "$d/lib/main.dart" ]]; then FLUTTER_DIR="$d"; break; fi
done < <(find . -maxdepth 3 -type f -name pubspec.yaml -printf '%h\n' | sort -u)

GRADLE_DIR=""
if [[ -z "$FLUTTER_DIR" ]]; then
  # fallback: first pubspec.yaml (sorted) if no app-style root found
  FLUTTER_DIR="$(find . -maxdepth 3 -type f -name pubspec.yaml -printf '%h\n' | sort -u | head -n 1 || true)"
fi
if [[ -z "$FLUTTER_DIR" ]]; then
  # find Android Gradle settings as last resort
  GRADLE_DIR="$(find . -maxdepth 3 -type f \( -name settings.gradle -o -name settings.gradle.kts \) -printf '%h\n' | sort -u | head -n 1 || true)"
fi

if [[ -n "$FLUTTER_DIR" ]]; then
  echo "project_type=flutter" >> $GITHUB_OUTPUT
  echo "project_dir=$FLUTTER_DIR" >> $GITHUB_OUTPUT
  echo "Detected Flutter project: $FLUTTER_DIR"
  ls -la "$FLUTTER_DIR"
  test -f "$FLUTTER_DIR/pubspec.yaml"
  test -f "$FLUTTER_DIR/lib/main.dart"
elif [[ -n "$GRADLE_DIR" ]]; then
  echo "project_type=gradle" >> $GITHUB_OUTPUT
  echo "project_dir=$GRADLE_DIR" >> $GITHUB_OUTPUT
  echo "Detected Android Gradle project: $GRADLE_DIR"
  ls -la "$GRADLE_DIR"
else
  echo "❌ 未检测到 Flutter 或 Android Gradle 工程（缺少 pubspec.yaml / settings.gradle）"; exit 1
fi

      # ---------- Flutter path (preferred) ----------
      - name: Set up JDK 17 (for both Flutter & Gradle)
        if: steps.detect.outputs.project_type == 'flutter' || steps.detect.outputs.project_type == 'gradle'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Flutter
        if: steps.detect.outputs.project_type == 'flutter'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.3'
          channel: stable
          cache: true

      - name: Flutter pub get
        if: steps.detect.outputs.project_type == 'flutter'
        run: flutter pub get
        working-directory: ${{ steps.detect.outputs.project_dir }}

      - name: Ensure Android platform exists
        if: steps.detect.outputs.project_type == 'flutter'
        run: |
          if [ ! -d "android" ]; then
            flutter create . --platforms=android --project-name quote_app --org com.example
          fi
        working-directory: ${{ steps.detect.outputs.project_dir }}

      
      
      
- name: Sanity check (project root)
  if: steps.detect.outputs.project_type == 'flutter'
  working-directory: ${{ steps.detect.outputs.project_dir }}
  run: |
    echo "PWD=$(pwd)"
    ls -la
    test -f pubspec.yaml
    test -f lib/main.dart
- name: Build APK (Flutter release)
        if: steps.detect.outputs.project_type == 'flutter'
        run: flutter build apk --release -t lib/main.dart
        working-directory: ${{ steps.detect.outputs.project_dir }}

      - name: Upload APK (Flutter)
        if: steps.detect.outputs.project_type == 'flutter'
        uses: actions/upload-artifact@v4
        with:
          name: quote_app-apk
          path: ${{ steps.detect.outputs.project_dir }}/build/app/outputs/flutter-apk/app-release.apk

      # ---------- Gradle path (fallback) ----------
      - name: Set up Gradle 8.4
        if: steps.detect.outputs.project_type == 'gradle'
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 8.7

      - name: Assemble debug with Gradle wrapper
        if: steps.detect.outputs.project_type == 'gradle'
        working-directory: ${{ steps.detect.outputs.project_dir }}
        run: |
          if [[ -x "./gradlew" ]]; then
            ./gradlew assembleDebug
          else
            gradle assembleDebug --no-daemon
          fi

      - name: Upload APK (Gradle)
        if: steps.detect.outputs.project_type == 'gradle'
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: |
            ${{ steps.detect.outputs.project_dir }}/**/outputs/apk/**/*.apk
