name: Build Android APK (auto-unzip & clean env)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # 给 Flutter/Gradle 更多内存
      GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx4g"
      # 强制用临时 pub 缓存，避免污染
      PUB_CACHE: ${{ runner.temp }}/pub-cache

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sanity - list repo root
        run: ls -lah

      # 自动定位 Flutter 工程；若没找到就解压最新 ZIP 再找
      - name: Locate Flutter project root (auto; unzip latest zip if needed)
        id: locate
        shell: bash
        run: |
          set -euo pipefail
          ROOT="$GITHUB_WORKSPACE"

          echo "== First pass: search for pubspec.yaml =="
          FOUND="$(find "$ROOT" -maxdepth 6 -type f -name pubspec.yaml | head -n1 || true)"

          if [ -z "$FOUND" ]; then
            echo "No pubspec.yaml found. Try to unzip latest .zip in repo root..."
            ZIP="$(ls -1t "$ROOT"/*.zip 2>/dev/null | head -n1 || true)"
            if [ -n "$ZIP" ]; then
              echo "Unzipping: $ZIP"
              unzip -q "$ZIP" -d "$ROOT"
              FOUND="$(find "$ROOT" -maxdepth 6 -type f -name pubspec.yaml | head -n1 || true)"
            fi
          fi

          if [ -z "$FOUND" ]; then
            echo "❌ pubspec.yaml not found in repo (even after unzip)."
            exit 66
          fi

          DIR="$(dirname "$FOUND")"
          echo "✅ Detected Flutter project at: $DIR"
          echo "project_dir=$DIR" >> "$GITHUB_OUTPUT"

      - name: Show detected project tree (top-level)
        working-directory: ${{ steps.locate.outputs.project_dir }}
        run: |
          pwd
          ls -lah
          echo "---- android/ ----"
          [ -d android ] && find android -maxdepth 2 -type f -printf "%p\n" | sort | sed -n '1,200p' || true

      - name: Set up JDK 17 (for Flutter & Gradle)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Flutter 3.22.0 (stable; no cache)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.0'
          channel: stable
          cache: false

      # 彻底清理缓存，保证“干净机器”效果
      - name: Clean caches (pub & gradle)
        shell: bash
        run: |
          set -euo pipefail
          echo "PUB_CACHE=$PUB_CACHE"
          rm -rf "$PUB_CACHE" || true
          rm -rf "$HOME/.pub-cache" || true
          rm -rf "$HOME/.gradle" || true

      - name: Flutter doctor (sanity)
        run: flutter doctor -v

      - name: Flutter pub get (clean env)
        id: pubget
        working-directory: ${{ steps.locate.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          flutter clean || true
          flutter pub get

      # 构建 APK，并捕获完整日志到 artifacts
      - name: Build APK (release · capture logs)
        id: build_apk
        working-directory: ${{ steps.locate.outputs.project_dir }}
        shell: bash
        run: |
          set +e
          # 捕获 flutter 构建日志
          flutter build apk --release -v 2>&1 | tee build_apk.log
          FB=$?
          echo "flutter_exit=$FB" >> "$GITHUB_OUTPUT"

          # 若存在 Gradle wrapper，顺带做一份 Gradle 构建日志（便于排查）
          if [ -f android/gradlew ]; then
            echo "== Also try Gradle assembleRelease (for additional logs) =="
            ( cd android && ./gradlew --no-daemon assembleRelease -i -S ) 2>&1 | tee gradle_build.log
            GB=${PIPESTATUS[0]}
          else
            echo "No Gradle wrapper found; skip direct gradle build." | tee gradle_build.log
            GB=0
          fi
          echo "gradle_exit=$GB" >> "$GITHUB_OUTPUT"

          # 不在此步失败，先把日志上传
          exit 0

      - name: Upload build logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            ${{ steps.locate.outputs.project_dir }}/build_apk.log
            ${{ steps.locate.outputs.project_dir }}/gradle_build.log
          if-no-files-found: warn
          retention-days: 7

      - name: Upload APK (if exists)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: ${{ steps.locate.outputs.project_dir }}/build/app/outputs/flutter-apk/app-release.apk
          if-no-files-found: warn
          retention-days: 7

      # 根据真实的退出码，在最后一步统一失败
      - name: Fail if build failed
        shell: bash
        run: |
          FB="${{ steps.build_apk.outputs.flutter_exit }}"
          GB="${{ steps.build_apk.outputs.gradle_exit }}"
          echo "Final exit codes -> flutter: ${FB:-unset}, gradle: ${GB:-unset}"
          # 以 Flutter 的结果为准；若 flutter 成功，gradle 的结果仅作参考
          if [ -z "${FB:-}" ] || [ "$FB" -ne 0 ]; then
            exit 1
          fi
