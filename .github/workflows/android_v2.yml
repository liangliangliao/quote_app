name: Android (scan V1 and build)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  android:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: List repo
        run: ls -lah

      - name: Unzip latest zip if no pubspec.yaml
        id: unzip
        shell: bash
        run: |
          set -euo pipefail
          if [ -f pubspec.yaml ]; then
            echo "unzipped=false" >> "$GITHUB_OUTPUT"; exit 0
          fi
          SEL="$(ls -1t *.zip 2>/dev/null | head -n1 || true)"
          if [ -z "${SEL}" ]; then
            SEL="$(find . -maxdepth 6 -type f -name '*.zip' -printf '%T@ %p\n' 2>/dev/null | sort -nr | head -n1 | cut -d' ' -f2- || true)"
          fi
          if [ -n "${SEL}" ]; then
            # 关键修复：-o 覆盖同名文件，-q 静默模式，避免交互询问
            unzip -oq "${SEL}" -d .
            echo "unzipped=true" >> "$GITHUB_OUTPUT"
          else
            echo "❌ 没有 pubspec.yaml，也没有 zip"; exit 66
          fi

      - name: Detect Flutter project dir (find pubspec.yaml)
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          DIR="$(find . -maxdepth 6 -type f -name pubspec.yaml | head -n1 | xargs -I{} dirname {} || true)"
          [ -n "$DIR" ] || { echo "❌ 未找到 pubspec.yaml"; exit 66; }
          DIR="${DIR#./}"
          echo "project_dir=${DIR}" >> "$GITHUB_OUTPUT"
          echo "Project: $DIR"

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Flutter 3.35.3 (stable)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.3'
          channel: stable
          cache: true

      - name: Print tool versions
        shell: bash
        run: |
          set -euo pipefail
          flutter doctor -v || true
          flutter --version || true
          dart --version || true

      - name: Clean ALL pub caches (fresh resolve)
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          flutter clean || true
          rm -f pubspec.lock || true
          yes | flutter pub cache clean >/dev/null 2>&1 || true
          rm -rf "$HOME/.pub-cache" || true

      - name: Flutter pub get (fresh)
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: flutter pub get

      - name: Patch Android toolchain to latest (Gradle/AGP/Kotlin)
        shell: bash
        working-directory: ${{ steps.detect.outputs.project_dir }}
        run: |
          set -euo pipefail
          mkdir -p android/gradle/wrapper
          cat > android/gradle/wrapper/gradle-wrapper.properties <<'EOF'
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-8.9-all.zip
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          EOF

          cat > android/build.gradle <<'EOF'
          plugins {
              id "com.android.application" version "8.7.2" apply false
              id "com.android.library"    version "8.7.2" apply false
              id "org.jetbrains.kotlin.android" version "2.0.21" apply false
          }
          allprojects {
              repositories { google(); mavenCentral() }
          }
          EOF

          if [ ! -f android/app/build.gradle ]; then
            cat > android/app/build.gradle <<'EOF'
            plugins {
                id "com.android.application"
                id "org.jetbrains.kotlin.android"
            }
            android {
                namespace "com.example.app"
                compileSdkVersion 35
                defaultConfig {
                    applicationId "com.example.app"
                    minSdkVersion 21
                    targetSdkVersion 35
                    versionCode 1
                    versionName "1.0"
                }
                buildTypes {
                    release {
                        minifyEnabled false
                        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                    }
                }
                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_17
                    targetCompatibility JavaVersion.VERSION_17
                }
                kotlinOptions { jvmTarget = "17" }
            }
            dependencies { }
            EOF
          fi

          cat > android/gradle.properties <<'EOF'
          org.gradle.jvmargs=-Xmx4g -Dfile.encoding=UTF-8
          android.useAndroidX=true
          android.enableJetifier=true
          kotlin.code.style=official
          EOF

          (cd android && ./gradlew --version || true)

      - name: Scan project/android for V1 markers (with line numbers)
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          echo "=== Scan your app's android/ sources ==="
          grep -RIn --include=*.{kt,java,xml} \
            -E 'io\.flutter\.app\.(FlutterActivity|FragmentActivity|FlutterApplication)|io\.flutter\.view\.FlutterMain|GeneratedPluginRegistrant\.registerWith|PluginRegistry(\.Registrar)?|ShimPluginRegistry|PluginRegistrantCallback' \
            android || true
          echo "=== Scan manifests for V1 application tag ==="
          grep -RIn --include=AndroidManifest.xml 'io\.flutter\.app\.FlutterApplication|flutterEmbedding' android || true

      - name: Scan pub-cache for V1 markers (with line numbers)
        shell: bash
        run: |
          set -euo pipefail
          PUB="${PUB_CACHE:-$HOME/.pub-cache}"
          echo "=== Scan downloaded plugins in: $PUB ==="
          grep -RIn --include=*.{kt,java} \
            -E 'io\.flutter\.app\.(FlutterActivity|FragmentActivity|FlutterApplication)|io\.flutter\.view\.FlutterMain|GeneratedPluginRegistrant\.registerWith|PluginRegistry(\.Registrar)?|ShimPluginRegistry|PluginRegistrantCallback' \
            "$PUB" 2>/dev/null || true

      - name: Build APK (full verbose and do not stop on fail)
        id: buildapk
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          ( set -o pipefail; flutter build apk -v 2>&1 | tee build_apk.log ) || true
          echo "EXIT_CODE=${PIPESTATUS[0]}" >> "$GITHUB_OUTPUT"
          echo "=== tail build_apk.log ==="
          tail -n 400 build_apk.log || true

      - name: Upload artifacts (APK + logs + Gradle files)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app-and-logs
          path: |
            ${{ steps.detect.outputs.project_dir }}/build/app/outputs/flutter-apk/app-release.apk
            ${{ steps.detect.outputs.project_dir }}/build_apk.log
            ${{ steps.detect.outputs.project_dir }}/android/gradle/wrapper/gradle-wrapper.properties
            ${{ steps.detect.outputs.project_dir }}/android/build.gradle
            ${{ steps.detect.outputs.project_dir }}/android/app/build.gradle
            ${{ steps.detect.outputs.project_dir }}/android/gradle.properties
            ${{ steps.detect.outputs.project_dir }}/android/.gradle/**/*
          if-no-files-found: warn
