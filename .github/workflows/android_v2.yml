name: Build Android APK

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx4g"
      PUB_CACHE: ${{ runner.temp }}/pub-cache
      GRADLE_USER_HOME: ${{ runner.temp }}/gradle-user-home
      ORG_GRADLE_PROJECT_org.gradle.daemon: "false"
      ORG_GRADLE_PROJECT_org.gradle.caching: "false"

    steps:
      - name: Checkout (clean workspace)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          clean: true

      - name: List repo root
        run: ls -lah

      - name: Pick latest ZIP
        id: pickzip
        shell: bash
        run: |
          set -euo pipefail
          # 先找根目录被 Git 跟踪的 zip（按最近提交时间）
          pick_by_git_commit() {
            printf "%s\n" "$1" | while IFS= read -r f; do
              [ -n "$f" ] || continue
              ct="$(git log -1 --format=%ct -- "$f" 2>/dev/null || echo 0)"
              printf "%s %s\n" "$ct" "$f"
            done | sort -nr | head -n1 | cut -d' ' -f2-
          }
          ROOT_TRACKED="$(git ls-files --full-name | awk '/^[^\/]+\.zip$/ {print}' || true)"
          SEL=""
          if [ -n "${ROOT_TRACKED:-}" ]; then
            SEL="$(pick_by_git_commit "$ROOT_TRACKED")"
          fi
          # 其次找仓库里任意被跟踪的 zip
          if [ -z "$SEL" ]; then
            ANY_TRACKED="$(git ls-files --full-name | awk '/\.zip$/ {print}' || true)"
            if [ -n "${ANY_TRACKED:-}" ]; then
              SEL="$(pick_by_git_commit "$ANY_TRACKED")"
            fi
          fi
          # 再次兜底：根目录按 mtime 最新的 zip
          if [ -z "$SEL" ]; then
            SEL="$(ls -1t *.zip 2>/dev/null | head -n1 || true)"
          fi
          # 最后兜底：全盘 6 层内按 mtime 最新
          if [ -z "$SEL" ]; then
            SEL="$(find . -maxdepth 6 -type f -name '*.zip' -printf '%T@ %p\n' 2>/dev/null | sort -nr | head -n1 | cut -d' ' -f2- || true)"
            SEL="${SEL#./}"
          fi
          [ -n "$SEL" ] || { echo "No .zip files found"; exit 1; }
          echo "zip=$GITHUB_WORKSPACE/$SEL" >> "$GITHUB_OUTPUT"
          echo "Picked ZIP: $SEL"

      - name: Unzip project
        shell: bash
        run: |
          unzip -q "${{ steps.pickzip.outputs.zip }}" -d .
          echo "After unzip:"
          ls -lah

      - name: Detect Flutter project root
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          FLUTTER_DIR="$(find . -maxdepth 6 -type f -name pubspec.yaml | head -n1 | xargs -I{} dirname {} || true)"
          [ -n "$FLUTTER_DIR" ] || { echo "pubspec.yaml not found"; exit 2; }
          echo "project_dir=$FLUTTER_DIR" >> "$GITHUB_OUTPUT"
          echo "Detected Flutter project at: $FLUTTER_DIR"

      - name: Enforce pristine host (delete caches)
        shell: bash
        run: |
          set -euxo pipefail
          rm -rf "$HOME/.pub-cache" "$HOME/.gradle" "$HOME/.android" || true
          rm -rf "$PUB_CACHE" "$GRADLE_USER_HOME" || true
          mkdir -p "$PUB_CACHE" "$GRADLE_USER_HOME"
          (cd "${{ steps.detect.outputs.project_dir }}" && flutter clean || true)

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Flutter (stable)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.3'
          channel: stable
          cache: false

      - name: Flutter pub get
        working-directory: ${{ steps.detect.outputs.project_dir }}
        run: flutter pub get

      - name: Build APK (release)
        working-directory: ${{ steps.detect.outputs.project_dir }}
        env:
          GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.caching=false -Dorg.gradle.jvmargs="-Xmx4g"
        run: |
          [ -x android/gradlew ] && (cd android && ./gradlew -v >/dev/null 2>&1 || true)
          flutter build apk --release -v --no-pub

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: ${{ steps.detect.outputs.project_dir }}/build/app/outputs/flutter-apk/app-release.apk
