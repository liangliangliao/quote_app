name: Android (scan V1 and build)

on:
  workflow_dispatch:
  push:
    branches: [main, master]

jobs:
  android:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: List repo
        run: ls -lah

      - name: Unzip latest zip if no pubspec.yaml
        id: unzip
        shell: bash
        run: |
          set -euo pipefail
          if [ -f pubspec.yaml ]; then
            echo "unzipped=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          SEL="$(ls -1t *.zip 2>/dev/null | head -n1 || true)"
          if [ -z "$SEL" ]; then
            SEL="$(find . -maxdepth 6 -type f -name '*.zip' -printf '%T@ %p\n' 2>/dev/null | sort -nr | head -n1 | cut -d' ' -f2- || true)"
          fi
          if [ -n "$SEL" ]; then
            unzip -q -n "$SEL" -d .
            echo "unzipped=true" >> "$GITHUB_OUTPUT"
          else
            echo "No pubspec.yaml and no zip"
            exit 66
          fi

      - name: Detect Flutter project dir (find pubspec.yaml)
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          DIR="$(find . -maxdepth 6 -type f -name pubspec.yaml | head -n1 | xargs -I{} dirname {} || true)"
          [ -n "$DIR" ] || { echo "No pubspec.yaml"; exit 66; }
          DIR="${DIR#./}"
          echo "project_dir=${DIR}" >> "$GITHUB_OUTPUT"
          echo "Project: $DIR"

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Flutter 3.35.3 (stable)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.35.3"
          channel: stable
          cache: true

      - name: Print tool versions
        shell: bash
        run: |
          set -euo pipefail
          flutter doctor -v || true
          flutter --version || true
          dart --version || true

      - name: Clean ALL pub caches (fresh resolve)
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          flutter clean || true
          rm -f pubspec.lock || true
          yes | flutter pub cache clean >/dev/null 2>&1 || true
          rm -rf "$HOME/.pub-cache" || true

      - name: Flutter pub get (fresh)
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: flutter pub get

      - name: Patch Android toolchain to latest (Gradle/AGP/Kotlin)
        shell: bash
        working-directory: ${{ steps.detect.outputs.project_dir }}
        run: |
          set -euo pipefail
          mkdir -p android/gradle/wrapper

          {
            printf '%s\n' 'distributionBase=GRADLE_USER_HOME'
            printf '%s\n' 'distributionPath=wrapper/dists'
            printf '%s\n' 'distributionUrl=https://services.gradle.org/distributions/gradle-8.9-all.zip'
            printf '%s\n' 'zipStoreBase=GRADLE_USER_HOME'
            printf '%s\n' 'zipStorePath=wrapper/dists'
          } > android/gradle/wrapper/gradle-wrapper.properties

          ROOT=android/build.gradle
          APP=android/app/build.gradle
          SET=android/settings.gradle

          # root build.gradle: inject-only
          touch "$ROOT"
          if ! grep -qE '^[[:space:]]*plugins[[:space:]]*\{' "$ROOT"; then
            {
              printf '%s\n' 'plugins {'
              printf '%s\n' '  id "com.android.application" apply false'
              printf '%s\n' '  id "com.android.library"    apply false'
              printf '%s\n' '  id "org.jetbrains.kotlin.android" apply false'
              printf '%s\n' '}'
            } >> "$ROOT"
          fi

          grep -q 'dev.flutter.flutter-gradle-plugin' "$ROOT" || \
            sed -i -E '0,/plugins[[:space:]]*\{/{s//plugins {\n  id "dev.flutter.flutter-gradle-plugin" apply false/}' "$ROOT"

          grep -q 'allprojects' "$ROOT" || \
            printf '%s\n' 'allprojects { repositories { google(); mavenCentral() } }' >> "$ROOT"

          MARK='// AUTO: apply Flutter Gradle plugin to all Android subprojects'
          if ! grep -qF "$MARK" "$ROOT"; then
            {
              printf '%s\n' "$MARK"
              printf '%s\n' 'subprojects { proj ->'
              printf '%s\n' '  proj.plugins.whenPluginAdded { pl ->'
              printf '%s\n' '    def n = pl.class.name'
              printf '%s\n' "    if (n.contains('AppPlugin') || n.contains('LibraryPlugin')) {"
              printf '%s\n' "      if (!proj.plugins.hasPlugin('dev.flutter.flutter-gradle-plugin')) {"
              printf '%s\n' "        proj.apply plugin: 'dev.flutter.flutter-gradle-plugin'"
              printf '%s\n' '      }'
              printf '%s\n' "      def androidExt = proj.extensions.findByName('android')"
              printf '%s\n' '      if (androidExt != null) {'
              printf '%s\n' '        try {'
              printf '%s\n' "          if (!androidExt.hasProperty('compileSdk') || androidExt.compileSdk == null) {"
              printf '%s\n' '            androidExt.compileSdkVersion 35'
              printf '%s\n' '          }'
              printf '%s\n' '        } catch (Throwable ignore) {}'
              printf '%s\n' '      }'
              printf '%s\n' '    }'
              printf '%s\n' '  }'
              printf '%s\n' '}'
            } >> "$ROOT"
          fi

          # app/build.gradle: ensure plugin and baseline
          if [ -f "$APP" ]; then
            if ! grep -qE '^[[:space:]]*plugins[[:space:]]*\{' "$APP"; then
              sed -i '1i plugins {\n  id "com.android.application"\n  id "org.jetbrains.kotlin.android"\n}\n' "$APP"
              sed -i '/apply plugin:[[:space:]]*["'\'']com.android.application["'\'']/d' "$APP" || true
              sed -i '/apply plugin:[[:space:]]*["'\'']kotlin-android["'\'']/d' "$APP" || true
            fi
            grep -q 'dev.flutter.flutter-gradle-plugin' "$APP" || \
              sed -i -E '0,/plugins[[:space:]]*\{/{s//plugins {\n  id "dev.flutter.flutter-gradle-plugin"/}' "$APP"

            sed -i -E 's/compileSdk(VERSION)?[[:space:]]+[0-9]+/compileSdkVersion 35/g' "$APP" || true
            sed -i -E 's/targetSdk(VERSION)?[[:space:]]+[0-9]+/targetSdkVersion 35/g' "$APP" || true
            grep -q 'minSdk' "$APP" || sed -i -E 's/(defaultConfig[[:space:]]*\{)/\1\n    minSdkVersion 21/' "$APP" || true

            if grep -q 'kotlinOptions' "$APP"; then
              sed -i -E 's/jvmTarget[[:space:]]*=.*/jvmTarget = "17"/' "$APP"
            else
              sed -i -E '0,/android[[:space:]]*\{/{s//android {\n  kotlinOptions { jvmTarget = "17" }/}' "$APP"
            fi
            if grep -q 'compileOptions' "$APP"; then
              sed -i -E 's/sourceCompatibility[[:space:]]+JavaVersion\.[A-Z0-9_]+/sourceCompatibility JavaVersion.VERSION_17/' "$APP"
              sed -i -E 's/targetCompatibility[[:space:]]+JavaVersion\.[A-Z0-9_]+/targetCompatibility JavaVersion.VERSION_17/' "$APP"
            else
              sed -i -E '0,/android[[:space:]]*\{/{s//android {\n  compileOptions { sourceCompatibility JavaVersion.VERSION_17; targetCompatibility JavaVersion.VERSION_17 }/}' "$APP"
            fi
          fi

          # settings.gradle: ensure Flutter plugin loader
          if [ -f "$SET" ]; then
            if ! grep -q 'dev.flutter.flutter-plugin-loader' "$SET"; then
              awk 'BEGIN{pm=0}
                   /pluginManagement[[:space:]]*\{/ {pm=1}
                   {print}
                   END{
                     if(!pm){
                       print "pluginManagement {"
                       print "  def flutterSdkPath = System.getenv(\"FLUTTER_ROOT\")"
                       print "  if (flutterSdkPath == null || flutterSdkPath.isEmpty()) {"
                       print "    def p = new Properties(); def lp = file(\"local.properties\");"
                       print "    if (lp.exists()) { lp.withInputStream { p.load(it) }; flutterSdkPath = p.getProperty(\"flutter.sdk\") }"
                       print "  }"
                       print "  includeBuild(\"${flutterSdkPath}/packages/flutter_tools/gradle\")"
                       print "}"
                     }
                     print ""
                     print "plugins { id \"dev.flutter.flutter-plugin-loader\" version \"1.0.0\" }"
                   }' "$SET" > "$SET.tmp" && mv "$SET.tmp" "$SET"
            fi
          fi

          (cd android && ./gradlew --version || true)

      - name: Scan project/android for V1 markers (with line numbers)
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          echo "=== Scan your app's android/ sources ==="
          grep -RIn --include=*.{kt,java,xml} \
            -E 'io\.flutter\.app\.(FlutterActivity|FragmentActivity|FlutterApplication)|io\.flutter\.view\.FlutterMain|GeneratedPluginRegistrant\.registerWith|PluginRegistry(\.Registrar)?|ShimPluginRegistry|PluginRegistrantCallback' \
            android || true
          echo "=== Scan manifests for V1 application tag ==="
          grep -RIn --include=AndroidManifest.xml 'io\.flutter\.app\.FlutterApplication|flutterEmbedding' android || true

      - name: Scan pub-cache for V1 markers (with line numbers)
        shell: bash
        run: |
          set -euo pipefail
          PUB="${PUB_CACHE:-$HOME/.pub-cache}"
          echo "=== Scan downloaded plugins in: $PUB ==="
          grep -RIn --include=*.{kt,java} \
            -E 'io\.flutter\.app\.(FlutterActivity|FragmentActivity|FlutterApplication)|io\.flutter\.view\.FlutterMain|GeneratedPluginRegistrant\.registerWith|PluginRegistry(\.Registrar)?|ShimPluginRegistry|PluginRegistrantCallback' \
            "$PUB" 2>/dev/null || true

      - name: Build APK (capture logs)
        id: buildapk
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          ( set -o pipefail; flutter build apk -v 2>&1 | tee build_apk.log ) || true
          echo "=== tail build_apk.log ==="
          tail -n 400 build_apk.log || true

      - name: Annotate compiler errors
        if: always()
        working-directory: ${{ steps.detect.outputs.project_dir }}
        shell: bash
        run: |
          set -euo pipefail
          echo "=== Flutter build log (errors only) ==="
          [ -f build_apk.log ] && grep -nE "(^e: |\.kt:[0-9]+:|\.java:[0-9]+:|^FAILURE:|Android v1 embedding)" build_apk.log || true

      - name: Upload artifacts (APK + logs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app-and-logs
          path: |
            ${{ steps.detect.outputs.project_dir }}/build/app/outputs/flutter-apk/app-release.apk
            ${{ steps.detect.outputs.project_dir }}/build_apk.log
